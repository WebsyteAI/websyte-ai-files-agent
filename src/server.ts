import { routeAgentRequest, type Schedule } from "agents";

import { unstable_getSchedulePrompt } from "agents/schedule";

import { AIChatAgent } from "agents/ai-chat-agent";
import {
  createDataStreamResponse,
  generateId,
  streamText,
  type StreamTextOnFinishCallback,
} from "ai";
import { openai } from "@ai-sdk/openai";
import { processToolCalls } from "./utils";
import { tools, executions } from "./tools";
import { AsyncLocalStorage } from "node:async_hooks";
// import { env } from "cloudflare:workers";

const model = openai("gpt-4o-2024-11-20");
// Cloudflare AI Gateway
// const openai = createOpenAI({
//   apiKey: env.OPENAI_API_KEY,
//   baseURL: env.GATEWAY_BASE_URL,
// });

// we use ALS to expose the agent context to the tools
export const agentContext = new AsyncLocalStorage<Chat>();
/**
 * Chat Agent implementation that handles real-time AI chat interactions
 */
export class Chat extends AIChatAgent<Env> {
  // File system storage is defined below as a public property

  /**
   * Handles incoming chat messages and manages the response stream
   * @param onFinish - Callback function executed when streaming completes
   */

  // biome-ignore lint/complexity/noBannedTypes: <explanation>
  async onChatMessage(onFinish: StreamTextOnFinishCallback<{}>) {
    // Create a streaming response that handles both text and tool outputs
    return agentContext.run(this, async () => {
      const dataStreamResponse = createDataStreamResponse({
        execute: async (dataStream) => {
          // Process any pending tool calls from previous messages
          // This handles human-in-the-loop confirmations for tools
          const processedMessages = await processToolCalls({
            messages: this.messages,
            dataStream,
            tools,
            executions,
          });

          // Stream the AI response using GPT-4
          const result = streamText({
            model,
            system: `You are a helpful assistant that can do various tasks... 

${unstable_getSchedulePrompt({ date: new Date() })}

If the user asks to schedule a task, use the schedule tool to schedule the task.
If the user asks to remove or cancel a scheduled task, use the removeScheduledTask tool with the task ID.
If the user asks to list or view scheduled tasks, use the listScheduledTasks tool to show all scheduled tasks.

You can also help the user with file management. You can create, edit, and delete files in the file system.
You can generate code for files based on their names and extensions.
`,
            messages: processedMessages,
            tools,
            onFinish,
            onError: (error) => {
              console.error("Error while streaming:", error);
            },
            maxSteps: 10,
          });

          // Merge the AI response stream with tool execution outputs
          result.mergeIntoDataStream(dataStream);
        },
      });

      return dataStreamResponse;
    });
  }
  async executeTask(description: string, task: Schedule<string>) {
    console.log(`Executing scheduled task: ${description}, ID: ${task.id}`);
    
    // Add a message to the chat about the executed task
    await this.saveMessages([
      ...this.messages,
      {
        id: generateId(),
        role: "user",
        content: `Running scheduled task: ${description}`,
        createdAt: new Date(),
      },
    ]);
    
    // If the task is a one-time task, we can remove it after execution
    // For recurring tasks (cron), we keep them
    if (task.type !== 'cron') {
      try {
        await this.cancelSchedule(task.id);
        console.log(`Removed one-time task after execution: ${task.id}`);
      } catch (error) {
        console.error(`Error removing task ${task.id}:`, error);
      }
    }
  }

  // File system methods - these need to be public methods
  fileSystem: any[] = [];

  async getFileSystem() {
    console.log("getFileSystem called");
    return JSON.stringify(this.fileSystem);
  }

  async setFileSystem(newFileSystem: any[]) {
    console.log("setFileSystem called with:", newFileSystem);
    this.fileSystem = newFileSystem;
    return "File system updated successfully";
  }

  async generateCode(fileName: string, extension: string) {
    console.log(`generateCode called for ${fileName}.${extension}`);
    // Generate code based on file name and extension
    let code = "";
    
    switch (extension.toLowerCase()) {
      case 'js':
      case 'jsx':
        code = `// ${fileName}
// Generated on ${new Date().toISOString()}

/**
 * This is a JavaScript file generated by the AI assistant.
 * You can edit this file to add your own code.
 */

function main() {
  console.log("Hello from ${fileName}!");
  
  // Your code here
  
  return "Success!";
}

// Export the main function
export default main;
`;
        break;
      
      case 'ts':
      case 'tsx':
        code = `// ${fileName}
// Generated on ${new Date().toISOString()}

/**
 * This is a TypeScript file generated by the AI assistant.
 * You can edit this file to add your own code.
 */

interface Result {
  success: boolean;
  message: string;
}

function main(): Result {
  console.log("Hello from ${fileName}!");
  
  // Your code here
  
  return {
    success: true,
    message: "Operation completed successfully"
  };
}

// Export the main function
export default main;
`;
        break;
      
      case 'html':
        code = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${fileName}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      color: #333;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
    }
    header {
      background-color: #f4f4f4;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    footer {
      margin-top: 2rem;
      text-align: center;
      font-size: 0.8rem;
      color: #777;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>${fileName.split('.')[0]}</h1>
    </header>
    
    <main>
      <p>This is a generated HTML file. You can edit it to create your own content.</p>
      
      <section>
        <h2>Features</h2>
        <ul>
          <li>Responsive design</li>
          <li>Clean structure</li>
          <li>Easy to customize</li>
        </ul>
      </section>
    </main>
    
    <footer>
      <p>Generated on ${new Date().toLocaleDateString()}</p>
    </footer>
  </div>
  
  <script>
    // Your JavaScript code here
    console.log('Page loaded successfully!');
  </script>
</body>
</html>`;
        break;
      
      case 'css':
        code = `/* ${fileName}
 * Generated on ${new Date().toISOString()}
 * 
 * This is a CSS file generated by the AI assistant.
 * You can edit this file to add your own styles.
 */

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: #333;
  background-color: #f9f9f9;
}

.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 15px;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
  margin-bottom: 0.5em;
  font-weight: 600;
  line-height: 1.3;
}

h1 {
  font-size: 2.5rem;
}

h2 {
  font-size: 2rem;
}

p {
  margin-bottom: 1rem;
}

/* Buttons */
.button {
  display: inline-block;
  padding: 0.5rem 1rem;
  background-color: #0066cc;
  color: white;
  text-decoration: none;
  border-radius: 4px;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.button:hover {
  background-color: #0052a3;
}

/* Responsive utilities */
@media (max-width: 768px) {
  h1 {
    font-size: 2rem;
  }
  
  h2 {
    font-size: 1.5rem;
  }
}
`;
        break;
      
      case 'md':
        code = `# ${fileName.split('.')[0]}

Generated on ${new Date().toLocaleDateString()}

## Overview

This is a Markdown file generated by the AI assistant. You can edit this file to add your own content.

## Features

- Easy to read
- Supports formatting
- Compatible with GitHub

## Code Example

\`\`\`javascript
function greet(name) {
  return \`Hello, \${name}!\`;
}

console.log(greet('World'));
\`\`\`

## Table Example

| Name | Type | Description |
|------|------|-------------|
| id | string | Unique identifier |
| name | string | Display name |
| created | date | Creation timestamp |

## Next Steps

1. Edit this file
2. Add your own content
3. Save and commit changes

---

Generated by AI Assistant
`;
        break;
      
      default:
        code = `// ${fileName}
// Generated on ${new Date().toISOString()}

/**
 * This is a file generated by the AI assistant.
 * You can edit this file to add your own code.
 */

// Your code here
`;
    }
    
    return code;
  }
}

/**
 * Worker entry point that routes incoming requests to the appropriate handler
 */
export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext) {
    if (!process.env.OPENAI_API_KEY) {
      console.error(
        "OPENAI_API_KEY is not set, don't forget to set it locally in .dev.vars, and use `wrangler secret bulk .dev.vars` to upload it to production"
      );
      return new Response("OPENAI_API_KEY is not set", { status: 500 });
    }
    return (
      // Route the request to our agent or return 404 if not found
      (await routeAgentRequest(request, env)) ||
      new Response("Not found", { status: 404 })
    );
  },
} satisfies ExportedHandler<Env>;
